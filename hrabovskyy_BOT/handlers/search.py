from datetime import datetime, timedelta
import requests
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from config import API_BASE_URL

async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from keyboards.main import SEARCH_NEWS

    user_data = context.user_data

    # –ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É
    if update.message and update.message.text == SEARCH_NEWS:
        await update.effective_chat.send_message(
            "üîç <b>–©–æ —à—É–∫–∞—î–º–æ?</b>\n"
            "–û–ø–∏—à–∏ –Ω–æ–≤–∏–Ω—É, —è–∫—É —Ç—Ä–µ–±–∞ –∑–Ω–∞–π—Ç–∏ üëá",
            parse_mode="HTML"
        )
        return "SEARCHING_NEWS"
    elif not user_data.get("search_text"):
        user_data["search_text"] = update.message.text

        from keyboards.search_keyboard import get_search_keyboard
        await update.effective_chat.send_message(
            "‚è≥ <b>–ó–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥ —à—É–∫–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É?</b>",
            reply_markup=get_search_keyboard(),
            parse_mode="HTML"
        )
        return "SEARCHING_NEWS"
    elif update.callback_query.data:
        callback_data = update.callback_query.data
        period = callback_data.split("_")[2]
        url = f"{API_BASE_URL}/News/search"

        await update.effective_chat.send_message("–®—É–∫–∞—é –Ω–æ–≤–∏–Ω–∏...")

        # –ù–û–í–ò–ù–ò –ó–ê –û–°–¢–ê–ù–ù–Ü–ô –¢–ò–ñ–î–ï–ù–¨
        if period == "week":
            url = f"{API_BASE_URL}/News/search"

            to = datetime.today().strftime('%Y-%m-%d')
            from_param = (datetime.today() - timedelta(days=7)).strftime('%Y-%m-%d')

            params = {
                "q": user_data.get("search_text"),
                "from": from_param,
                "to": to,
            }

            data = requests.get(url, params=params).json()

            articles = data.get("articles")
            if not articles:
                await update.effective_chat.send_message("–ù–µ –∑–Ω–∞–π—à–æ–≤ –Ω–æ–≤–∏–Ω –∑–∞ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º ü´§")
                return ConversationHandler.END

            await send_all_articles(update, data.get("articles")[:5])

            from handlers.main_menu import back_to_main_menu
            await back_to_main_menu(update, context)
            return ConversationHandler.END

        # –ó–ê –í–ï–°–¨ –ß–ê–°
        if period == "anytime":
            to = datetime.today().strftime('%Y-%m-%d')
            from_param = datetime.strptime("2025-05-11", "%Y-%m-%d")

            params = {
                "q": user_data.get("search_text"),
                "from": from_param,
                "to": to,
            }

            data = requests.get(url, params=params).json()

            articles = data.get("articles")
            if not articles:
                await update.effective_chat.send_message("–ù–µ –∑–Ω–∞–π—à–æ–≤ –Ω–æ–≤–∏–Ω –∑–∞ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º ü´§")
                return ConversationHandler.END

            await send_all_articles(update, data.get("articles")[:5])

            from handlers.main_menu import back_to_main_menu
            await back_to_main_menu(update, context)
            return ConversationHandler.END

        await update.callback_query.answer()
        return ConversationHandler.END
    else:
        ConversationHandler.END

async def send_all_articles(update: Update, response):
    # –Ü—Ç–µ—Ä—É—î–º–æ –ø–æ —Å—Ç–∞—Ç—Ç—è—Ö
    for article in response:
        title = article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        author = article.get("author", "–ù–µ–≤—ñ–¥–æ–º–∏–π –∞–≤—Ç–æ—Ä")
        source = article.get("source", {}).get("name", "–ù–µ–≤—ñ–¥–æ–º–µ –¥–∂–µ—Ä–µ–ª–æ")
        published_at = article.get("publishedAt", "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞")
        url = article.get("url", "–ë–µ–∑ URL")

        await update.effective_chat.send_message(
            f"üì∞ <b>{title}</b>\n\n"
            f"‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> {author}\n"
            f"üèõÔ∏è <b>–î–∂–µ—Ä–µ–ª–æ:</b> {source}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b> {published_at}\n"
            f"üîó <a href='{url}'>–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—É –Ω–æ–≤–∏–Ω—É</a>",
            parse_mode="HTML"
        )